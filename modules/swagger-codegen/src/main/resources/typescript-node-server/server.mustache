import * as fs from "fs";
import * as path from "path";
import * as http from "http";
import * as https from "https";

import * as connect from "connect";
import * as swaggerTools from "swagger-tools";
import * as jsyaml from "js-yaml";

export interface CommonServerOptions {
    readonly swaggerUi: string;
    readonly swaggerUiDir?: string;
}

export interface HttpsServerOptions extends https.ServerOptions, CommonServerOptions {
    readonly protocol: "https";
}

export interface HttpServerOptions extends CommonServerOptions {
    readonly protocol: "http";
    readonly serverPort: number;
}

export type ServerOptions = HttpsServerOptions | HttpServerOptions;

export const defaultOptions: ServerOptions = { protocol: "http", serverPort: 4000, swaggerUi: "/docs" };

export function startServer(options: ServerOptions = defaultOptions): void {
    // swaggerRouter configuration
    const routerOptions = {
        swaggerUi: path.join(__dirname, "swagger.json"),
        controllers: path.join(__dirname, "controllers"),
        useStubs: process.env.NODE_ENV === "development" // Conditionally turn on stubs (mock mode)
    };

    // The Swagger document (require it, build it programmatically, fetch it from a URL, ...)
    const spec = fs.readFileSync(path.join(__dirname, "api", "swagger.yaml"), "utf8");
    const swaggerDoc = jsyaml.safeLoad(spec);

    const app = connect();

    // Initialize the Swagger middleware
    swaggerTools.initializeMiddleware(swaggerDoc, middleware => {
        // Interpret Swagger resources and attach metadata to request - must be first in swagger-tools middleware chain
        app.use(middleware.swaggerMetadata());

        // Validate Swagger requests
        app.use(middleware.swaggerValidator());

        // Route validated requests to appropriate controller
        app.use(middleware.swaggerRouter(routerOptions));

        // Serve the Swagger documents and Swagger UI
        app.use(middleware.swaggerUi(options));

        const serverPort = options.protocol === "https" ? 443 : options.serverPort;

        const listener = () => {
            console.log(
                `Your server is listening on port ${serverPort} (${options.protocol}://localhost:${serverPort})`
            );
            console.log(
                `Swagger UI is available on ${options.protocol}://localhost:${serverPort}/${options.swaggerUi}`
            );
        };

        if (options.protocol === "http") {
            http.createServer(app).listen(options.serverPort, listener);
        } else {
            https.createServer(options, app).listen(listener);
        }
    });
}
